* Ether

/Ether/ is a low-level, general purpose systems
programming language that aims to improve on C.
C is already a (nearly) perfect language designed to 
be suitable for any purpose, but its power comes for
a price. /Ether/ improves on C's semantics by enhancing 
the runtime, testing and building support. 

/Ether/ also incorporates features of paradigms other 
than procedural without the implications of a slow runtime.
For other /Ether/ features, see the documentation.

** Features (bloat-free)

/Ether/ acts more like a toolset than a solution. It gives users
the ability to develop on a dynamic platform without compromising
ease of use. Features like 'compile-time code execution' and 
'evaluating expressions in an interpreter' are necessary to
develop high-quality and effient software.

+ compile-time code execution
+ stong static type system
+ built-in build-system
+ runtime type information
+ built-in testing support
+ statically-typed interpreter 
+ runtime checks in debug-builds
  + stack array bounds
+ concurrent code execution
+ essential standard library toolset

** Installation

/Ether/ uses platform-specific scripts to automatically build the entire 
Ether platform. See *Dependencies* section for details.

**** Dependencies

+ gcc (or any other standard-compliant C compiler)

**** Windows

#+BEGIN_SRC 
.\build.bat
#+END_SRC

**** MacOS / Linux

#+BEGIN_SRC 
./build.sh
#+END_SRC

After building, the relevent binaries can be found in 
the /bin// directory. 

*** Platform Support

For now, /Ether/ compiles to C for simplicity reasons. Later, when 
the compiler is mature enough, native machine code will be generated.
Therefore, /Ether/ will be for now supported on any platform C can
cross-compile to.

** Example 

*** Hello World

#+BEGIN_SRC c
[define int:main [void]
    [putsl "Hello, world!"]]
#+END_SRC

*** Semantic features (brief)

#+BEGIN_SRC c
[struct entity
    [vec3: pos]
	[vec3: rot]
	[vec3: scl]
	[char*: name]]

[static]
[define void:entity_init [entity*:e]
    [set e.pos null]
	[set e.rot null]
	[set e.scl null]
	[putsl e.name]]

[define void:entity_render [entity*:e]
    [renderer_submit e.mesh_comp]]]

[define int:main [int:argc, char**:argv]
    [let entity*:e]
	[comptime
		[assert [= [sizeof entity*] 8]]] ;; only 64-bit
	[entity_init e]
	[entity_render e]

[test "entity test"
    [let entity:e = [entity_init]]
    [assert e]]
#+END_SRC

** License

This project is licensed under the terms of the MIT license.
See LICENSE file for details.

** Contribution

This project is managed under GitHub only, so if 
you want to contribute to Ether's development, open
a pull request.

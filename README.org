* Ether

/Ether/ is a low-level, general purpose systems
programming language that aims to improve on C & C++.
C (with classes) is already a (nearly) perfect language designed to 
be suitable for any purpose, but its power comes for
a price. /Ether/ improves on C's semantics by enhancing 
the runtime, testing and building support. 

/Ether/ also incorporates features of paradigms other 
than procedural without the implications of a slow runtime.
For other /Ether/ features, see the documentation.

** Features (bloat-free)

Ether acts more like a toolset than a solution. It gives users
the ability to develop on a dynamic platform without compromising
ease of use. Features like 'compile-time code execution' and 
'evaluating expressions in an interpreter' are necessary to
develop high-quality and effient code.

+ compile-time code execution
+ stong static type system
+ built-in build-system
+ runtime type information
+ built-in testing support
+ ether-static interpreter
+ runtime checks in debug-mode
  + stack array bounds
+ concurrent and safe code execution
+ essential standard library toolset

** Installation

**** Dependencies

+ g++ (or any other standard-compliant C++ compiler)

Even though /Ether's/ source code is using C++ as a language of choice,
it only uses classes (and some template code) to function.

/Ether/ provides platform-specific scripts to automatically
build the entire Ether platform. See Dependencies section for details.

**** Windows

#+BEGIN_SRC sh
.\build.bat
#+END_SRC

**** MacOS / Linux

#+BEGIN_SRC 
./build.sh
#+END_SRC

After building, the relevent binaries can be found in 
the /bin// directory. 

*** Platform Support

Because of the way /Ether/ compiles native programs without
using a back-end like LLVM or Clang, it (for now) only 
supports 64-bit desktop platforms. 

** Example 

*** Hello World

#+BEGIN_SRC c++
[deploy stdio]

[int: main [void]
    [std::putsl "Hello, world!"]]
#+END_SRC

*** Semantic features (brief)

#+BEGIN_SRC c++
[deploy stdio]
[deploy "renderer.eth"]

[namespace zf
	[static]
	[void: entity_init [entity*:e]
	    [e.pos = null]
		[e.rot = null]
		[e.scl = null]
		[std::putsl e.name]]

	[void: entity_render [entity*:e]
	    [renderer::submit e.mesh_comp]]]

[int: main [int:argc char**:argv]
    [entity*:e]
	[comptime
		[assert [== [sizeof entity*] 8]]]	# only 64-bit
	[zf::entity_init e]
	[zf::entity_render e]
#+END_SRC

** License

This project is licensed under the terms of the MIT license.
See LICENSE file for details.

** Contribution

This project is managed under GitHub only, so if 
you want to contribute to Ether's development, open
a pull request.
